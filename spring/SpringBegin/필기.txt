

스프링 프레임워크, Spring Framework
- https://spring.io
- Spring 1.0 ~ 5.0 > Spring 4.0 주력
- 전자 정부 표준 프레임워크(정부 프로젝트(공공재 프로젝트) or 대형 프로젝트 -> 기본 개발 + 운영 환경)
- 스프링 프레임워크는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크이다.
- EJB > Struts > Spring > ?
- 세팅된(안정적인) 개발 환경 제공 + 생산성 + 개발편의성 + 유지/보수성 + 협업(**) + 대형화 프로젝트 등..
- 초기 설정 고비용(***) + 소규모 부적합

- Servlet/JSP 게시판 + JDBC -> 10시간
- Spring 게시판 + MyBatis -> 4~5시간



스프링 선수 지식
1. Java -> OOP
	- 클래스(객체), 상속, 인터페이스 등등..
2. 콘솔 or 웹
3. XML
	- 데이터를 지정하는 용도의 수준(= JSON)
	- 스프링과 관련된 여러가지 설정 > XML 저장(web.xml)


스프링 개발 환경
1. 이클립스 + 스프링 관련 라이브러리(*.jar) -> 수동
2. 이클립스 + 플러그인(STS) -> 반자동
3. STS(이클립스 + 플러그인(STS)) -> 자동(반자동) 


------------------------------------------------------

스프링 수업(X) -> 스프링 사전 수업(O) -> 디자인 패턴 몇가지.. -> 자바 수업(O)


스프링 프레임워크 구성 요소

1. 의존성 주입 지원(DI)
2. 관점 지향 프로그래밍 지원(AOP)
3. Spring MVC 지원(******)
4. 레이아웃 지원(Tiles)
5. 데이터베이스 프레임워크 호환성
	- JDBC 연동
	- Spring JDBC 지원
	- MyBatis 연동


스프링 DI
- Dependency Injection
- 의존(성) 주입
- 프로그래밍에서 구성 요소간의 의존 관계가 소스 내부가 아닌 외부 환경에 의해서 정의되게 하는 디자인 패턴
- 하나의 객체가 자신의 기능을 실행하기 위해 반드시 다른 특정 객체가 필요한 경우, 그 특정 객체를 자신이 직접 생성하지 않고, 외부로부터 건내받아 생성하는 경우를 의존 주입이라고 한다.
- 사용 도구: 생성자 or Setter

- 패키지 > "com.test.spring.di.ex01"
- 파일 > "Ex01.java"
- 파일 > "Util.java"


- 패키지 > "com.test.spring.di.ex02"
- 파일 > "Ex02.java"
- 파일 > "Util.java"

- 패키지 > "com.test.spring.di.ex03"
- 파일 > "Ex03.java"
 	  > "Service.java"
 	  > "DB.java"
 	  > "File.java"
- SpringBegin > "lib" 폴더 생성 > "ojdbc6.jar" 



면접)
- 배치(업무)
- 어디지역에서 근무 -> 본사 or 파견 or 외근
- 사수 유무?
- 급여(***) -> 퇴직금 포함 (XXX)
- 복지
- 신입 교육 기간 ? 형태 ? ..
- 입사일까지 1~2주 정도 남는데 혹시 미리 공부해와야 할게 있는지?



SpringBegin(자바 프로젝트) -> SpringBegin(스프링 지원 프로젝트)
- 스프링 관련 jar 설치

SpringBegin > src > "config06.xml"

> 5.2.1 Configuration metadata


AOP, Aspect Oriented Programming
- 관점 지향 프로그래밍
- 생산 & 유지 보수성 향상을 위한 기법
- 주업무와 보조업무를 분리시켜 각각의 업무를 관리하는 기법


AOP 용어
1. Core Concern
	- 주업무
	- 주 관심사
	
2. Cross-Cutting Concern
	- 보조 업무
	- 횡단 관심사
	- 인증 처리, 예외 처리, 로깅, 트랜잭션 등..

3. Advice
	- 보조 업무가 주 업무 실행 중 어느 시점에서 개입해서 실행할지에 대한 정의
	- 보조 업무는 주 업무와 종속적인 관계를 맺으면 안된다.
	
	a. Before
		- 주업무를 실행하기 전에 보조업무를 실행한다.
		- 보조업무 실행 -> 주업무 실행
		
	b. After
		- 주업무를 실행한 후에 보조업무를 실행한다.
		- 주업무 실행 -> 보조업무 실행
	
	e. Around
		- 주업무를 실행하기 전후로 보조업무를 실행한다.
		- Before + After
		- 보조업무 실행 -> 주업무 실행 -> 보조업무 실행
		
	==================================================	
	
	c. After-returning
		- 주업무를 실행한 후에 주 업무의 반환값을 사용하는 보조업무를 실행한다.
	
	d. After-throwing
		- 주업무를 실행 중 예외가 발생했을 때 보조업무를 실행한다.
		
4. Join Point

5. Point Cut

6. Weaving

7. Proxy

--------------
패키지: "com.test.spring.aop"
파일 생성
1. 클래스
	- Main.java		//메인 클래스
	- Memo.java		//주업무 클래스
	--------------------------------
	- Logger.java	//로그 클래스
	- Auth.java		//인증 클래스
	--------------------------------
	- memo.xml		//스프링 설정 파일(DI + AOP)
	
	
업무
- 콘솔 프로젝트
- 주제: 메모장
- AOP 적용


구현 기능(주업무)
1. 메모쓰기
2. 메모읽기
3. 메모수정하기
4. 메모삭제하기


구현 기능(보조업무)
1. 로그기록
2. 인증처리






















